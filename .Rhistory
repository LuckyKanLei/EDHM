}
Unit_Trans <- t(array(rep(ModelData$GridData$Area / Param$TimeStepSec / 1000, Param$PeriodN),
dim = c(Param$GridN, Param$PeriodN)))
WaterSource <- map(StoreData$Ground, function(mm_m3_s1) mm_m3_s1 * Unit_Trans)
## route ####
G2AimGAll <- ModelData$Confluence$G2AimGAll
ModelData$Confluence$UHParam <- list(list(StreamLength = G2AimGAll[[1]][,3],
RiverheadNumber = Param$UPPaList[1],
WaveVelocity = Param$UPPaList[4]),
list(StreamLength = G2AimGAll[[1]][,3],
RiverheadNumber = Param$UPPaList[2],
WaveVelocity = Param$UPPaList[5]),
list(StreamLength = G2AimGAll[[2]][,3],
RiverheadNumber = Param$UPPaList[3],
WaveVelocity = Param$UPPaList[6]),
list(StreamLength = G2AimGAll[[3]][,3],
RiverheadNumber = Param$UPPaList[3],
WaveVelocity = Param$UPPaList[7]))
ModelData$Confluence$WaterSource <- WaterSource
MUOut <- makeUHALL(ModelData, Param)
ModelData$Confluence <- left_merge(ModelData$Confluence, MUOut)
RTOut <- ROUTE.IUHG2RES(ModelData, Param)
return(RTOut)
}
ParamCVIC$PeriodN <- 2556
TimeVariData_500 <- new("t_vari.hm.list")
TimeVariData_500@.Data <- TimeVariData[1:2556]
# TimeVariData_500$Prec$Precipitation <- TimeVariData_500$Prec$Precipitation
a <- MODEL.CVIC(TimeVariData_500, TimeInvariData, ParamCVIC)
plot(a$Route$StaFlow)
plot(a$Route$StaFlow)
plot(a$Route$StaFlow[1:500])
ParamterCVIC = c(5, 50, 100, 150,
5, 0,
0.1, 1.3, 0.1,9, 0.1,
0.1, 0.1,
3, 0.01
0.5, 0.5, 0.5 , 0.5,0.5,0.5,0.5)
ParamterCVIC = c(5, 50, 100, 150,
5, 0,
0.1, 1.3, 0.1,9, 0.1,
0.1, 0.1,
3, 0.01,
0.5, 0.5, 0.5 , 0.5,0.5,0.5,0.5)
length(ParamterCVIC)
ParamCVIC$PeriodN <- 500
TimeVariData_500 <- new("t_vari.hm.list")
TimeVariData_500@.Data <- TimeVariData[1:500]
MODEL.CVIC <- function(TimeVariData, TimeInvariData, Param){
##1####
PeriodN <- Param$PeriodN
GridN <- Param$GridN
StoreData <- new("t_vari.hm.list")
ModelData <- new("t_vari.hm.list")
StoreData$Ground$Runoff <- t_vari.array(0, c(PeriodN, GridN))
StoreData$Ground$BaseFlow <- t_vari.array(0, c(PeriodN, GridN))
ModelData <- left_merge(TimeVariData, TimeInvariData)
SoilData <- ModelData$SoilData
ZoneDepth <- array(matrix(rep(c(Param$ZoneDepth1,
Param$ZoneDepth2,
Param$ZoneDepth3), GridN),
GridN, 3, byrow = T), dim = c(GridN,3))
ZoneMoistureCapacityMax = array(c(ZoneDepth[1] * SoilData$Porosity,
ZoneDepth[2] * SoilData$Porosity,
ZoneDepth[3] * SoilData$Porosity),
dim = c(GridN,3))
TimeInvariData$Ground <- list(ZoneDepth = ZoneDepth,
ZoneMoistureCapacityMax = ZoneMoistureCapacityMax)
ModelData <- left_merge(TimeVariData, TimeInvariData)
## Initial boundary ####
PeriodData <- new('hm.list')
Ground <- list(ZoneDepth = matrix(rep(c(Param$ZoneDepth1, Param$ZoneDepth2, Param$ZoneDepth3), GridN), 3, GridN, byrow = T),
MoistureCapacityMax = (Param$ZoneDepth1 + Param$ZoneDepth2) * SoilData$Porosity)
Ground$ZoneMoistureVolume <- array(0.0, c(GridN, 3))
Ground$MoistureVolume = array(Ground$ZoneMoistureVolume[,1])
PeriodData$Ground <- Ground
PeriodData$Intercept <- list(Interception = array(0.0, c(GridN)))
PeriodData$Snow <- list(Volum_mm = array(0.0, c(GridN)))
PeriodData$Evatrans <- list(EvaporationCanopy = array(0.0, c(GridN)))
PeriodData <- left_merge(PeriodData, TimeInvariData)
## 2 ####
for (i in 2:PeriodN) {
PeriodData <- left_merge(PeriodData, TimeVariData[i])
## intercept ####
ICOut <- INTERCEPTION.Gash(PeriodData, Param)
PeriodData <- left_merge(PeriodData, ICOut)
## ET ####
PeriodData$Ground$MoistureVolume <- PeriodData$Ground$ZoneMoistureVolume[,1]
PeriodData$Ground$MoistureCapacityMax <- PeriodData$Ground$ZoneMoistureCapacityMax[,1]
ETOut <- ActualET.Vic(PeriodData, Param)
PeriodData <- left_merge(PeriodData, ETOut)
## precptation divid ####
PDOut <- PRECDivid(PeriodData, Param)
PeriodData <- left_merge(PeriodData, PDOut)
# map(PDOut$Prec, mean)
## snow melt ##
SNOut <- SNOW.Dd(PeriodData, Param)
PeriodData <- left_merge(PeriodData, SNOut)
# map(SNOut$Prec, mean)
## base flow ####
PeriodData$Ground$MoistureVolume <- PeriodData$Ground$ZoneMoistureVolume[,3]
PeriodData$Ground$MoistureCapacityMax <- PeriodData$Ground$ZoneMoistureCapacityMax[,3]
BFOut <- BASEFLOW.ARNO(PeriodData, Param)
PeriodData <- left_merge(PeriodData, BFOut)
# map(BFOut$Ground, mean)
## runoff ####
# PeriodData$Ground <- mergeList(PeriodData$Ground, SoilData)
PeriodData$Ground$Depth <- PeriodData$Ground$ZoneDepth[,1]
IFROut <- InfiltratRat.GreenAmpt(PeriodData)
PeriodData <- left_merge(PeriodData, IFROut)
PeriodData$Ground$MoistureCapacityMax <- (Param$SoilMoistureCapacityB + 1) *
(PeriodData$Ground$ZoneDepth[,1] + PeriodData$Ground$ZoneDepth[,2]) * PeriodData$SoilData$Porosity
PeriodData$Ground$MoistureVolume <- PeriodData$Ground$ZoneMoistureVolume[,1] + PeriodData$Ground$ZoneMoistureVolume[,2]
RFOut <- RUNOFF.Vic(PeriodData, Param)
PeriodData <- left_merge(PeriodData, RFOut)
# map(RFOut$Ground, mean)
## ground water ####
GWOut <- GROUNDWATER.Vic(PeriodData, Param)
PeriodData <- left_merge(PeriodData, GWOut)
PeriodData$
## for end ##
browser()
StoreData[i] <- PeriodData
}
Unit_Trans <- t(array(rep(ModelData$GridData$Area / Param$TimeStepSec / 1000, Param$PeriodN),
dim = c(Param$GridN, Param$PeriodN)))
WaterSource <- map(StoreData$Ground, function(mm_m3_s1) mm_m3_s1 * Unit_Trans)
## route ####
G2AimGAll <- ModelData$Confluence$G2AimGAll
ModelData$Confluence$UHParam <- list(list(StreamLength = G2AimGAll[[1]][,3],
RiverheadNumber = Param$UPPaList[1],
WaveVelocity = Param$UPPaList[4]),
list(StreamLength = G2AimGAll[[1]][,3],
RiverheadNumber = Param$UPPaList[2],
WaveVelocity = Param$UPPaList[5]),
list(StreamLength = G2AimGAll[[2]][,3],
RiverheadNumber = Param$UPPaList[3],
WaveVelocity = Param$UPPaList[6]),
list(StreamLength = G2AimGAll[[3]][,3],
RiverheadNumber = Param$UPPaList[3],
WaveVelocity = Param$UPPaList[7]))
ModelData$Confluence$WaterSource <- WaterSource
MUOut <- makeUHALL(ModelData, Param)
ModelData$Confluence <- left_merge(ModelData$Confluence, MUOut)
RTOut <- ROUTE.IUHG2RES(ModelData, Param)
return(RTOut)
}
# TimeVariData_500$Prec$Precipitation <- TimeVariData_500$Prec$Precipitation
a <- MODEL.CVIC(TimeVariData_500, TimeInvariData, ParamCVIC)
MODEL.CVIC <- function(TimeVariData, TimeInvariData, Param){
##1####
PeriodN <- Param$PeriodN
GridN <- Param$GridN
StoreData <- new("t_vari.hm.list")
ModelData <- new("t_vari.hm.list")
StoreData$Ground$Runoff <- t_vari.array(0, c(PeriodN, GridN))
StoreData$Ground$BaseFlow <- t_vari.array(0, c(PeriodN, GridN))
ModelData <- left_merge(TimeVariData, TimeInvariData)
SoilData <- ModelData$SoilData
ZoneDepth <- array(matrix(rep(c(Param$ZoneDepth1,
Param$ZoneDepth2,
Param$ZoneDepth3), GridN),
GridN, 3, byrow = T), dim = c(GridN,3))
ZoneMoistureCapacityMax = array(c(ZoneDepth[1] * SoilData$Porosity,
ZoneDepth[2] * SoilData$Porosity,
ZoneDepth[3] * SoilData$Porosity),
dim = c(GridN,3))
TimeInvariData$Ground <- list(ZoneDepth = ZoneDepth,
ZoneMoistureCapacityMax = ZoneMoistureCapacityMax)
ModelData <- left_merge(TimeVariData, TimeInvariData)
## Initial boundary ####
PeriodData <- new('hm.list')
Ground <- list(ZoneDepth = matrix(rep(c(Param$ZoneDepth1, Param$ZoneDepth2, Param$ZoneDepth3), GridN), 3, GridN, byrow = T),
MoistureCapacityMax = (Param$ZoneDepth1 + Param$ZoneDepth2) * SoilData$Porosity)
Ground$ZoneMoistureVolume <- array(0.0, c(GridN, 3))
Ground$MoistureVolume = array(Ground$ZoneMoistureVolume[,1])
PeriodData$Ground <- Ground
PeriodData$Intercept <- list(Interception = array(0.0, c(GridN)))
PeriodData$Snow <- list(Volum_mm = array(0.0, c(GridN)))
PeriodData$Evatrans <- list(EvaporationCanopy = array(0.0, c(GridN)))
PeriodData <- left_merge(PeriodData, TimeInvariData)
## 2 ####
for (i in 2:PeriodN) {
PeriodData <- left_merge(PeriodData, TimeVariData[i])
## intercept ####
ICOut <- INTERCEPTION.Gash(PeriodData, Param)
PeriodData <- left_merge(PeriodData, ICOut)
## ET ####
PeriodData$Ground$MoistureVolume <- PeriodData$Ground$ZoneMoistureVolume[,1]
PeriodData$Ground$MoistureCapacityMax <- PeriodData$Ground$ZoneMoistureCapacityMax[,1]
ETOut <- ActualET.Vic(PeriodData, Param)
PeriodData <- left_merge(PeriodData, ETOut)
## precptation divid ####
PDOut <- PRECDivid(PeriodData, Param)
PeriodData <- left_merge(PeriodData, PDOut)
# map(PDOut$Prec, mean)
## snow melt ##
SNOut <- SNOW.Dd(PeriodData, Param)
PeriodData <- left_merge(PeriodData, SNOut)
# map(SNOut$Prec, mean)
## base flow ####
PeriodData$Ground$MoistureVolume <- PeriodData$Ground$ZoneMoistureVolume[,3]
PeriodData$Ground$MoistureCapacityMax <- PeriodData$Ground$ZoneMoistureCapacityMax[,3]
BFOut <- BASEFLOW.ARNO(PeriodData, Param)
PeriodData <- left_merge(PeriodData, BFOut)
# map(BFOut$Ground, mean)
## runoff ####
# PeriodData$Ground <- mergeList(PeriodData$Ground, SoilData)
PeriodData$Ground$Depth <- PeriodData$Ground$ZoneDepth[,1]
IFROut <- InfiltratRat.GreenAmpt(PeriodData)
PeriodData <- left_merge(PeriodData, IFROut)
PeriodData$Ground$MoistureCapacityMax <- (Param$SoilMoistureCapacityB + 1) *
(PeriodData$Ground$ZoneDepth[,1] + PeriodData$Ground$ZoneDepth[,2]) * PeriodData$SoilData$Porosity
PeriodData$Ground$MoistureVolume <- PeriodData$Ground$ZoneMoistureVolume[,1] + PeriodData$Ground$ZoneMoistureVolume[,2]
RFOut <- RUNOFF.Vic(PeriodData, Param)
PeriodData <- left_merge(PeriodData, RFOut)
# map(RFOut$Ground, mean)
## ground water ####
GWOut <- GROUNDWATER.Vic(PeriodData, Param)
PeriodData <- left_merge(PeriodData, GWOut)
# PeriodData$
## for end ##
browser()
StoreData[i] <- PeriodData
}
Unit_Trans <- t(array(rep(ModelData$GridData$Area / Param$TimeStepSec / 1000, Param$PeriodN),
dim = c(Param$GridN, Param$PeriodN)))
WaterSource <- map(StoreData$Ground, function(mm_m3_s1) mm_m3_s1 * Unit_Trans)
## route ####
G2AimGAll <- ModelData$Confluence$G2AimGAll
ModelData$Confluence$UHParam <- list(list(StreamLength = G2AimGAll[[1]][,3],
RiverheadNumber = Param$UPPaList[1],
WaveVelocity = Param$UPPaList[4]),
list(StreamLength = G2AimGAll[[1]][,3],
RiverheadNumber = Param$UPPaList[2],
WaveVelocity = Param$UPPaList[5]),
list(StreamLength = G2AimGAll[[2]][,3],
RiverheadNumber = Param$UPPaList[3],
WaveVelocity = Param$UPPaList[6]),
list(StreamLength = G2AimGAll[[3]][,3],
RiverheadNumber = Param$UPPaList[3],
WaveVelocity = Param$UPPaList[7]))
ModelData$Confluence$WaterSource <- WaterSource
MUOut <- makeUHALL(ModelData, Param)
ModelData$Confluence <- left_merge(ModelData$Confluence, MUOut)
RTOut <- ROUTE.IUHG2RES(ModelData, Param)
return(RTOut)
}
# TimeVariData_500$Prec$Precipitation <- TimeVariData_500$Prec$Precipitation
a <- MODEL.CVIC(TimeVariData_500, TimeInvariData, ParamCVIC)
MODEL.CVIC <- function(TimeVariData, TimeInvariData, Param){
##1####
PeriodN <- Param$PeriodN
GridN <- Param$GridN
StoreData <- new("t_vari.hm.list")
ModelData <- new("t_vari.hm.list")
StoreData$Ground$Runoff <- t_vari.array(0, c(PeriodN, GridN))
StoreData$Ground$BaseFlow <- t_vari.array(0, c(PeriodN, GridN))
ModelData <- left_merge(TimeVariData, TimeInvariData)
SoilData <- ModelData$SoilData
ZoneDepth <- array(matrix(rep(c(Param$ZoneDepth1,
Param$ZoneDepth2,
Param$ZoneDepth3), GridN),
GridN, 3, byrow = T), dim = c(GridN,3))
ZoneMoistureCapacityMax = array(c(ZoneDepth[1] * SoilData$Porosity,
ZoneDepth[2] * SoilData$Porosity,
ZoneDepth[3] * SoilData$Porosity),
dim = c(GridN,3))
TimeInvariData$Ground <- list(ZoneDepth = ZoneDepth,
ZoneMoistureCapacityMax = ZoneMoistureCapacityMax)
ModelData <- left_merge(TimeVariData, TimeInvariData)
## Initial boundary ####
PeriodData <- new('hm.list')
Ground <- list(ZoneDepth = matrix(rep(c(Param$ZoneDepth1, Param$ZoneDepth2, Param$ZoneDepth3), GridN), 3, GridN, byrow = T),
MoistureCapacityMax = (Param$ZoneDepth1 + Param$ZoneDepth2) * SoilData$Porosity)
Ground$ZoneMoistureVolume <- array(0.0, c(GridN, 3))
Ground$MoistureVolume = array(Ground$ZoneMoistureVolume[,1])
PeriodData$Ground <- Ground
PeriodData$Intercept <- list(Interception = array(0.0, c(GridN)))
PeriodData$Snow <- list(Volum_mm = array(0.0, c(GridN)))
PeriodData$Evatrans <- list(EvaporationCanopy = array(0.0, c(GridN)))
PeriodData <- left_merge(PeriodData, TimeInvariData)
## 2 ####
for (i in 2:PeriodN) {
PeriodData <- left_merge(PeriodData, TimeVariData[i])
## intercept ####
ICOut <- INTERCEPTION.Gash(PeriodData, Param)
PeriodData <- left_merge(PeriodData, ICOut)
## ET ####
PeriodData$Ground$MoistureVolume <- PeriodData$Ground$ZoneMoistureVolume[,1]
PeriodData$Ground$MoistureCapacityMax <- PeriodData$Ground$ZoneMoistureCapacityMax[,1]
ETOut <- ActualET.Vic(PeriodData, Param)
PeriodData <- left_merge(PeriodData, ETOut)
## precptation divid ####
PDOut <- PRECDivid(PeriodData, Param)
PeriodData <- left_merge(PeriodData, PDOut)
# map(PDOut$Prec, mean)
## snow melt ##
SNOut <- SNOW.Dd(PeriodData, Param)
PeriodData <- left_merge(PeriodData, SNOut)
# map(SNOut$Prec, mean)
## base flow ####
PeriodData$Ground$MoistureVolume <- PeriodData$Ground$ZoneMoistureVolume[,3]
PeriodData$Ground$MoistureCapacityMax <- PeriodData$Ground$ZoneMoistureCapacityMax[,3]
BFOut <- BASEFLOW.ARNO(PeriodData, Param)
PeriodData <- left_merge(PeriodData, BFOut)
# map(BFOut$Ground, mean)
## runoff ####
# PeriodData$Ground <- mergeList(PeriodData$Ground, SoilData)
PeriodData$Ground$Depth <- PeriodData$Ground$ZoneDepth[,1]
IFROut <- InfiltratRat.GreenAmpt(PeriodData)
PeriodData <- left_merge(PeriodData, IFROut)
PeriodData$Ground$MoistureCapacityMax <- (Param$SoilMoistureCapacityB + 1) *
(PeriodData$Ground$ZoneDepth[,1] + PeriodData$Ground$ZoneDepth[,2]) * PeriodData$SoilData$Porosity
PeriodData$Ground$MoistureVolume <- PeriodData$Ground$ZoneMoistureVolume[,1] + PeriodData$Ground$ZoneMoistureVolume[,2]
RFOut <- RUNOFF.Vic(PeriodData, Param)
PeriodData <- left_merge(PeriodData, RFOut)
# map(RFOut$Ground, mean)
## ground water ####
GWOut <- GROUNDWATER.Vic(PeriodData, Param)
PeriodData <- left_merge(PeriodData, GWOut)
PeriodData$Ground$BaseFlow <- PeriodData$Ground$BaseFlow + PeriodData$Ground$Overflow
## for end ##
# browser()
StoreData[i] <- PeriodData
}
Unit_Trans <- t(array(rep(ModelData$GridData$Area / Param$TimeStepSec / 1000, Param$PeriodN),
dim = c(Param$GridN, Param$PeriodN)))
WaterSource <- map(StoreData$Ground, function(mm_m3_s1) mm_m3_s1 * Unit_Trans)
## route ####
G2AimGAll <- ModelData$Confluence$G2AimGAll
ModelData$Confluence$UHParam <- list(list(StreamLength = G2AimGAll[[1]][,3],
RiverheadNumber = Param$UPPaList[1],
WaveVelocity = Param$UPPaList[4]),
list(StreamLength = G2AimGAll[[1]][,3],
RiverheadNumber = Param$UPPaList[2],
WaveVelocity = Param$UPPaList[5]),
list(StreamLength = G2AimGAll[[2]][,3],
RiverheadNumber = Param$UPPaList[3],
WaveVelocity = Param$UPPaList[6]),
list(StreamLength = G2AimGAll[[3]][,3],
RiverheadNumber = Param$UPPaList[3],
WaveVelocity = Param$UPPaList[7]))
ModelData$Confluence$WaterSource <- WaterSource
MUOut <- makeUHALL(ModelData, Param)
ModelData$Confluence <- left_merge(ModelData$Confluence, MUOut)
RTOut <- ROUTE.IUHG2RES(ModelData, Param)
return(RTOut)
}
# TimeVariData_500$Prec$Precipitation <- TimeVariData_500$Prec$Precipitation
a <- MODEL.CVIC(TimeVariData_500, TimeInvariData, ParamCVIC)
plot(a$Route$StaFlow[1:500])
ParamCVIC$PeriodN <- 2556
# TimeVariData_500$Prec$Precipitation <- TimeVariData_500$Prec$Precipitation
a <- MODEL.CVIC(TimeVariData_500, TimeInvariData, ParamCVIC)
# TimeVariData_500$Prec$Precipitation <- TimeVariData_500$Prec$Precipitation
a <- MODEL.CVIC(TimeVariData, TimeInvariData, ParamCVIC)
ParamterCVIC = c(5, 50, 100, 150,
5, 0,
0.1, 1.3, 0.1,9, 0.1,
0.1, 0.1,
3, 0.01,
0.5, 0.5, 0.5 , 0.5,0.5,0.5,0.5)
ParamCVIC <- list(GridN = 262,
PeriodN = 2556,
TimeStepSec = 3600*24,
UHPeriodN = 180,
# UHUnitTranslate = 35,
CanopyCapacity = ParamterCVIC[1],
ZoneDepth1 = ParamterCVIC[2],
ZoneDepth2 = ParamterCVIC[3],
ZoneDepth3 = ParamterCVIC[4],
### 1.0 snow##
Factor_Day_degree = ParamterCVIC[5], ## 2.7-12 [mm]
Base_T = ParamterCVIC[6], ## -2-5.5 [Cel]
Max_Snow_T = 5.5,
Min_Snow_T = -2,
### 1.1 interception ##
CoefficientFreeThroughfall = ParamterCVIC[7],
### 1.2 base flow ##
ExponentARNOBase = ParamterCVIC[8],
ARNOBaseThresholdRadio = ParamterCVIC[9],
DrainageLossMax = ParamterCVIC[10],##*## [mm]
DrainageLossMin = ParamterCVIC[11], ##*## [mm]
### 1.3 Runoff ##
SoilMoistureCapacityB = ParamterCVIC[12], ##*## ##b is the soil moisture capacity shape paeter, which is a measure of the spatial variability of the soil moisture capacity
InfiltrationRateB = ParamterCVIC[13],  ##*## ##b is the soil infiltrtionrate shape paeter,
### 1.4 ground water ##
ClappHornbergerB = ParamterCVIC[14],
Coeff_Conductivity = ParamterCVIC[15],
UPPaList = ParamterCVIC[16:22])
load('kdModel_CVIC_Data.rda')
ParamCVIC$PeriodN <- 25
TimeVariData_500 <- new("t_vari.hm.list")
TimeVariData_500@.Data <- TimeVariData[1:25]
# TimeVariData_500$Prec$Precipitation <- TimeVariData_500$Prec$Precipitation
a <- MODEL.CVIC(TimeVariData_500, TimeInvariData, ParamCVIC)
plot(a$Route$StaFlow[1:500])
MODEL.CVIC <- function(TimeVariData, TimeInvariData, Param){
##1####
PeriodN <- Param$PeriodN
GridN <- Param$GridN
StoreData <- new("t_vari.hm.list")
ModelData <- new("t_vari.hm.list")
StoreData$Ground$Runoff <- t_vari.array(0, c(PeriodN, GridN))
StoreData$Ground$BaseFlow <- t_vari.array(0, c(PeriodN, GridN))
ModelData <- left_merge(TimeVariData, TimeInvariData)
SoilData <- ModelData$SoilData
ZoneDepth <- array(matrix(rep(c(Param$ZoneDepth1,
Param$ZoneDepth2,
Param$ZoneDepth3), GridN),
GridN, 3, byrow = T), dim = c(GridN,3))
ZoneMoistureCapacityMax = array(c(ZoneDepth[1] * SoilData$Porosity,
ZoneDepth[2] * SoilData$Porosity,
ZoneDepth[3] * SoilData$Porosity),
dim = c(GridN,3))
TimeInvariData$Ground <- list(ZoneDepth = ZoneDepth,
ZoneMoistureCapacityMax = ZoneMoistureCapacityMax)
ModelData <- left_merge(TimeVariData, TimeInvariData)
## Initial boundary ####
PeriodData <- new('hm.list')
Ground <- list(ZoneDepth = matrix(rep(c(Param$ZoneDepth1, Param$ZoneDepth2, Param$ZoneDepth3), GridN), 3, GridN, byrow = T),
MoistureCapacityMax = (Param$ZoneDepth1 + Param$ZoneDepth2) * SoilData$Porosity)
Ground$ZoneMoistureVolume <- array(0.0, c(GridN, 3))
Ground$MoistureVolume = array(Ground$ZoneMoistureVolume[,1])
PeriodData$Ground <- Ground
PeriodData$Intercept <- list(Interception = array(0.0, c(GridN)))
PeriodData$Snow <- list(Volum_mm = array(0.0, c(GridN)))
PeriodData$Evatrans <- list(EvaporationCanopy = array(0.0, c(GridN)))
PeriodData <- left_merge(PeriodData, TimeInvariData)
## 2 ####
for (i in 2:PeriodN) {
PeriodData <- left_merge(PeriodData, TimeVariData[i])
## intercept ####
ICOut <- INTERCEPTION.Gash(PeriodData, Param)
PeriodData <- left_merge(PeriodData, ICOut)
## ET ####
PeriodData$Ground$MoistureVolume <- PeriodData$Ground$ZoneMoistureVolume[,1]
PeriodData$Ground$MoistureCapacityMax <- PeriodData$Ground$ZoneMoistureCapacityMax[,1]
ETOut <- ActualET.Vic(PeriodData, Param)
PeriodData <- left_merge(PeriodData, ETOut)
## precptation divid ####
PDOut <- PRECDivid(PeriodData, Param)
PeriodData <- left_merge(PeriodData, PDOut)
# map(PDOut$Prec, mean)
## snow melt ##
SNOut <- SNOW.Dd(PeriodData, Param)
PeriodData <- left_merge(PeriodData, SNOut)
# map(SNOut$Prec, mean)
## base flow ####
PeriodData$Ground$MoistureVolume <- PeriodData$Ground$ZoneMoistureVolume[,3]
PeriodData$Ground$MoistureCapacityMax <- PeriodData$Ground$ZoneMoistureCapacityMax[,3]
BFOut <- BASEFLOW.ARNO(PeriodData, Param)
PeriodData <- left_merge(PeriodData, BFOut)
# map(BFOut$Ground, mean)
## runoff ####
# PeriodData$Ground <- mergeList(PeriodData$Ground, SoilData)
PeriodData$Ground$Depth <- PeriodData$Ground$ZoneDepth[,1]
IFROut <- InfiltratRat.GreenAmpt(PeriodData)
PeriodData <- left_merge(PeriodData, IFROut)
PeriodData$Ground$MoistureCapacityMax <- (Param$SoilMoistureCapacityB + 1) *
(PeriodData$Ground$ZoneDepth[,1] + PeriodData$Ground$ZoneDepth[,2]) * PeriodData$SoilData$Porosity
PeriodData$Ground$MoistureVolume <- PeriodData$Ground$ZoneMoistureVolume[,1] + PeriodData$Ground$ZoneMoistureVolume[,2]
RFOut <- RUNOFF.Vic(PeriodData, Param)
PeriodData <- left_merge(PeriodData, RFOut)
# map(RFOut$Ground, mean)
## ground water ####
GWOut <- GROUNDWATER.Vic(PeriodData, Param)
PeriodData <- left_merge(PeriodData, GWOut)
PeriodData$Ground$BaseFlow <- PeriodData$Ground$BaseFlow + PeriodData$Ground$Overflow
## for end ##
# browser()
StoreData[i] <- PeriodData
}
Unit_Trans <- t(array(rep(ModelData$GridData$Area / Param$TimeStepSec / 1000, Param$PeriodN),
dim = c(Param$GridN, Param$PeriodN)))
WaterSource <- map(StoreData$Ground, function(mm_m3_s1) mm_m3_s1 * Unit_Trans)
## route ####
G2AimGAll <- ModelData$Confluence$G2AimGAll
ModelData$Confluence$UHParam <- list(list(StreamLength = G2AimGAll[[1]][,3],
RiverheadNumber = Param$UPPaList[1],
WaveVelocity = Param$UPPaList[4]),
list(StreamLength = G2AimGAll[[1]][,3],
RiverheadNumber = Param$UPPaList[2],
WaveVelocity = Param$UPPaList[5]),
list(StreamLength = G2AimGAll[[2]][,3],
RiverheadNumber = Param$UPPaList[3],
WaveVelocity = Param$UPPaList[6]),
list(StreamLength = G2AimGAll[[3]][,3],
RiverheadNumber = Param$UPPaList[3],
WaveVelocity = Param$UPPaList[7]))
ModelData$Confluence$WaterSource <- WaterSource
MUOut <- makeUHALL(ModelData, Param)
ModelData$Confluence <- left_merge(ModelData$Confluence, MUOut)
RTOut <- ROUTE.IUHG2RES(ModelData, Param)
return(RTOut)
}
# TimeVariData_500$Prec$Precipitation <- TimeVariData_500$Prec$Precipitation
a <- MODEL.CVIC(TimeVariData_500, TimeInvariData, ParamCVIC)
Param <- ParamCVIC
document()
setwd('F:\\G2\\R-program\\R-Packge\\EDHM')
document()
document()
document()
library(EDHM)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
writeLines('PATH="c:rtools40\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
install.packages(c("boot", "callr", "caTools", "cluster", "cpp11", "gert", "MASS", "mgcv", "processx", "survival", "tinytex", "vctrs"))
