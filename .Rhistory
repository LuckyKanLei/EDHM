InData0 <- InDataSB
InData0 <- mergeData(InData0, deleteData(InDataSI,  OutSB)) ##OutSD no output
InData0 <- mergeData(InData0, deleteData(InDataSE,  OutSI)) ##OutSI not data,frame
InData0 <- mergeData(InData0, deleteData(InDataSM,  OutSE))
InData0 <- mergeData(InData0, deleteData(InDataSS,  OutSM))
Param0 <- reduce(list(ParamSB, ParamSI, ParamSE, ParamSM, ParamSS), mergeData)
Arguments0 <- list(InData = InData0, Param = Param0)
if(runMode == "VIEW"){
vw <- viewArgum(fcName, Arguments0)
return(list(Arguments = Arguments0, Out = vw))
} else {
message("The above information can be ignored.\n")
ck <- checkData(Arguments0, list(InData = InData, Param = Param), "Arguments")
return()
}
}
## "RUN" mode ####
## SNOW Blowing ####
SBOut <- SNOWBlowing(InData, Param)
InData <- mergeData(InData, SBOut)
## SNOW Intercept ####
SIOut <- INTERCEPTION.SNOWVIC(InData, Param)
InData <- mergeData(InData, SIOut)
## SNOW Energy ####
SEOut <- SNOWEnergy(InData, Param)
InData <- mergeData(InData, SEOut)
## SNOW Melt ####
SMOut <- SNOWMelt(InData, Param)
InData <- mergeData(InData, SMOut)
## SNOW State ####
SSOut <- SNOWState(InData, Param)
Out <- reduce(list(SBOut, SIOut, SEOut, SMOut, SSOut), mergeData)
return(Out)
}
SNOW.VIC(runMode = "VIEW")
#' and use SNOWBlowing(runMode = "VIEW") view the options structure and set the options
#' @param runMode mode to run the function, there three mode:
#' \itemize{
#' \item "RUN": default, run the function like general faunction
#' \item "VIEW": view the structures of Arguments and Output(return)
#' \item "CHECK": chek the structure of the Arguments
#' }
#' @param viewGN grid nummer for "VIEW" mode.
#' @return use SNOWIntercept(runMode = "VIEW") view the outputs and theirs structure
#' @export
SNOWBlowing <- function(InData, Param, runMode = "RUN", viewGN = 3) {
## "VIEW" and "CHECK" mode ####
if(runMode == "VIEW" | runMode == "CHECK"){
fcName <- "SNOWBlowing"
Snow <- data.frame(Depth = rep(0, viewGN), LastSnow = rep(1, viewGN), SurfWater = rep(0, viewGN))
Snow <- putUnit(Snow, c("m", "timeStep", "m"))
Energy <- data.frame(TSnow = rep(0, viewGN))
Aerodyna <- data.frame(ReferHeightSnow = runif(viewGN, 2, 2), RoughCanopy = runif(viewGN, 0.02, 0.52),
RoughSnow = runif(viewGN, 0.002, 0.0052), DisplacCanopy = runif(viewGN, 0.2, 1.7), WindSpeedSnow = runif(viewGN, 2, 17))
MetData <- data.frame(TAir = rep(0, viewGN), AirDensity = runif(viewGN, 1, 2), VaporPressure = runif(viewGN, 0.01, 0.2))
MetData <- putUnit(MetData, c("Cel", "kg/m3", "kPa"))
VegData <- data.frame(Fetch = runif(viewGN, 0.1, 0.3))
VegData <- putUnit(VegData, c("100%"))
LandData <- data.frame(LagOneSlope = runif(viewGN, 0.5, 0.5), SigmaSlope = runif(viewGN, 0.6, 0.8))
LandData <- putUnit(LandData, c("100%", "100%"))
InData0 <- list(Snow = Snow, Energy = Energy, Aerodyna = Aerodyna,
MetData = MetData, VegData = VegData, LandData = LandData)
Param0 <- list(BLOWING_CSALT = ParamAll$BLOWING_CSALT, BLOWING_KA = ParamAll$BLOWING_KA,
BLOWING_NUMINCS = ParamAll$BLOWING_NUMINCS,
BLOWING_MAX_ITER = ParamAll$BLOWING_MAX_ITER, BLOWING_SETTLING = ParamAll$BLOWING_SETTLING,
BLOWING_UTHRESH = ParamAll$BLOWING_UTHRESH, BLOWING_KIN_VIS = ParamAll$BLOWING_KIN_VIS,
SVP_A = ParamAll$SVP_A, SVP_B = ParamAll$SVP_B, SVP_C = ParamAll$SVP_C,
gridN = viewGN,
TimeStepSec = 3600,
BLOWING_CALC_PROB = TRUE, BLOWING_FETCH = TRUE, BLOWING_SIMPLE = TRUE,
BLOWING_SPATIAL_WIND = TRUE, BLOWING_VAR_THRESHOLD = TRUE)
Arguments <- list(InData = InData0, Param = Param0)
if(runMode == "VIEW"){
vw <- viewArgum(fcName, Arguments)
return(list(Arguments = Arguments, Out = vw))
} else {
ck <- checkData(Arguments, list(InData = InData, Param = Param), "Arguments")
return()
}
}
## "RUN" mode ####
## initialize variable ####
Tair <- InData$MetData$TAir
AirDens <- InData$MetData$AirDensity
EactAir <- InData$MetData$VaporPressure
lag_one <- InData$LandData$LagOneSlope
sigma_slope <- InData$LandData$SigmaSlope
fe <- InData$VegData$Fetch
displacement <- InData$Aerodyna$DisplacCanopy
roughness <- InData$Aerodyna$RoughCanopy
Wind <- InData$Aerodyna$WindSpeedSnow
ZO <- InData$Aerodyna$RoughSnow
Zrh <- InData$Aerodyna$ReferHeightSnow
Tsnow <- InData$Energy$TSnow
snowdepth <- InData$Snow$Depth
LastSnow <- InData$Snow$LastSnow
SurfaceLiquidWater <- InData$Snow$SurfWater
Dt <- Param$TimeStepSec
InData$Energy$SublimatLatentHeat <- calc_latent_heat_of_sublimation(Tair)
Ls <- InData$Energy$SublimatLatentHeat
#### Calculate some general variables, that don't depend on wind speed. ####
#### Age in hours ####
Age <- LastSnow * Dt / SEC_PER_HOUR
#### Saturation density of water vapor, Liston A-8 ####
es <- calc_saturated_vapor_pressure(Tair, Param)
Tk <- Tair + CONST_TKFRZ
Ros <- CONST_EPS * es / (CONST_RDAIR * Tk)
#### Diffusivity in m2/s, Liston eq. A-7 ####
Diffusivity <- (2.06e-5) * (Tk / 273.)^1.75
#### Essery et al. 1999, eq. 6 (m*s/kg)
FT <- (Ls / (Param$BLOWING_KA * Tk)) * (Ls * Tk / CONST_RDAIR - 1.)
FT <- FT + 1. / (Diffusivity * Ros)
#### grid cell 10 m wind speed <- 50th percentile wind ####
#### Wind speed at 2 m above snow was passed to this function. ####
wind10 <- Wind * log(10. / (ZO + DBL_EPSILON)) / log((2 + ZO) / (ZO + DBL_EPSILON))
#### Check for bare soil case. ####
# if (iveg == Nveg) {
#     fe <- 1500
#     sigma_slope <- .0002
# }
#### sigma_w/uo:
ratio <- (2.44 - (0.43) * lag_one) * sigma_slope
sigma_w <- wind10 * ratio
Uo <- wind10
#### Parameters for roughness above snow. ####
hv <- (3. / 2.) * displacement
Nd <- (4. / 3.) * (roughness / displacement)
#### Begin loop through wind probability function. ####
area <- 1. / Param$BLOWING_NUMINCS
U10 <- Uo
#### Calculate parameters for probability of blowing snow occurence. ####
#### ( Li and Pomeroy 1997) ####
judgeHV <- (snowdepth < hv)
Uveg <- (U10 / sqrt(1. + 170 * Nd * (abs(hv - snowdepth)))) * judgeHV + U10 * (!judgeHV)
prob_occurence <- get_prob(Tair, Age, SurfaceLiquidWater, Uveg)
if(!Param$BLOWING_CALC_PROB) prob_occurence <- 1.
#### Calculate threshold shear stress. Send 0 for constant or  ####
#### 1 for variable threshold after Li and Pomeroy (1997)      ####
utshear <- get_thresh(Tair, SurfaceLiquidWater, ZO)
if(!Param$BLOWING_VAR_THRESHOLD) utshear <- Param$BLOWING_UTHRESH
#### Iterate to find actual shear stress during saltation. ####
ShearOut <- shear_stress(Uo, ZO, utshear, Param$BLOWING_MAX_ITER)
ushear <- ShearOut$ushear
Zo_salt <- ShearOut$Zo_salt
judgeUT <- (ushear > utshear)
SubFluxOut <- CalcSubFlux(EactAir, es, Zrh, AirDens, utshear,
ushear, fe, Uo, Zo_salt, FT, Param)
SubFlux <- (SubFluxOut$SubFlux) * judgeUT
Transport <- SubFluxOut$Transport
Transport[which(!judgeUT)] <- 0.0
Total <- SubFlux * prob_occurence
TotalTransport <- Transport * prob_occurence
if (Param$BLOWING_SPATIAL_WIND) {
dim2 <- Param$BLOWING_NUMINCS
indexHalb <- as.integer(dim2 / 2)
SubFlux <- LowBundry <- UppBundry <- matrix(0.0, sum(sigma_w != 0.), dim2)
indexW0 <- which(sigma_w != 0.)
#### Find the limits of integration. ####
LowBundry[, 1] <- -9999
UppBundry[, 1] <- Uo + sigma_w * log(2. * area)
LowBundry[, 2:indexHalb] <- mapply(function(p) Uo + sigma_w * log(2. * (p - 1) * area), 2:indexHalb)
UppBundry[, 2:indexHalb] <- mapply(function(p) Uo + sigma_w * log(2. * p * area), 2:indexHalb)
LowBundry[, (indexHalb + 1): (dim2 - 1)] <- mapply(function(p) Uo - sigma_w * log(2. - 2. * ((p - 1) * area)), (indexHalb + 1): (dim2 - 1))
UppBundry[, (indexHalb + 1): (dim2 - 1)] <- mapply(function(p) Uo - sigma_w * log(2. - 2. * (p * area)), (indexHalb + 1): (dim2 - 1))
LowBundry[, dim2] <- Uo - sigma_w * log(2. - 2. * area)
UppBundry[, dim2] <- 9999
#### Find expected value of wind speed for the interval. ####
U10 <- UoTem <- colRep(Uo[indexW0], dim2)
sigma_w <- colRep(sigma_w[indexW0], dim2)
snowdepth <- colRep(snowdepth[indexW0], dim2)
hv <- colRep(hv[indexW0], dim2)
Nd <- colRep(Nd[indexW0], dim2)
Tair <- colRep(Tair[indexW0], dim2)
Age <- colRep(Age[indexW0], dim2)
SurfaceLiquidWater <- colRep(SurfaceLiquidWater[indexW0], dim2)
ZO <- colRep(ZO[indexW0], dim2)
ushear <- colRep(ushear[indexW0], dim2)
Zo_salt <- colRep(Zo_salt[indexW0], dim2)
EactAir <- colRep(EactAir[indexW0], dim2)
es <- colRep(es[indexW0], dim2)
Zrh <- colRep(Zrh[indexW0], dim2)
AirDens <- colRep(AirDens[indexW0], dim2)
fe <- colRep(fe[indexW0], dim2)
Tsnow <- colRep(Tsnow[indexW0], dim2)
FT <- colRep(FT[indexW0], dim2)
Transport <- colRep(Transport[indexW0], dim2)
U10[which(LowBundry >= UoTem)] <- (-0.5 * ((UppBundry + sigma_w) * exp((-1. / sigma_w) * (UppBundry - UoTem)) -
(LowBundry + sigma_w) *
exp((-1. / sigma_w) * (LowBundry - UoTem))) / area)[which(LowBundry >= UoTem)]
U10[which(LowBundry >= UoTem)] <- (0.5 * ((UppBundry - sigma_w) * exp((1. / sigma_w) * (UppBundry - UoTem)) -
(LowBundry - sigma_w) *
exp((1. / sigma_w) * (LowBundry - UoTem))) / area)[which(LowBundry >= UoTem)]
U10 <- maxSVector(0.4, minSVector(25,U10))
#### Calculate parameters for probability of blowing snow occurence. ####
#### ( Li and Pomeroy 1997) ####
judgeHV <- (snowdepth < hv)
Uveg <- (U10 / sqrt(1. + 170 * Nd * abs(hv - snowdepth))) * judgeHV + U10 * (!judgeHV)
prob_occurence <- get_prob(Tair, Age, SurfaceLiquidWater, Uveg)
if(!Param$BLOWING_CALC_PROB) prob_occurence <- 1.
#### Calculate threshold shear stress. Send 0 for constant or  ####
#### 1 for variable threshold after Li and Pomeroy (1997)      ####
utshear <- get_thresh(Tair, SurfaceLiquidWater, ZO)
if(!Param$BLOWING_VAR_THRESHOLD) utshear <- Param$BLOWING_UTHRESH
#### Iterate to find actual shear stress during saltation. ####
U10[which(is.na(U10))] <- 0.
ShearOut <- shear_stress(U10, ZO, utshear, Param$BLOWING_MAX_ITER) ##?##
ushear <- ShearOut$ushear
Zo_salt <- ShearOut$Zo_salt
judgeUU <- (ushear > utshear)
SubFluxOut2 <- CalcSubFlux(EactAir, es, Zrh, AirDens, utshear,
ushear, fe, U10, Zo_salt, FT, Param)
SubFlux <- (SubFluxOut2$SubFlux) * judgeUU
Transport <- SubFluxOut2$Transport
Transport[which(!judgeUU)] <- 0.
Total[indexW0] = rowSums((1. / Param$BLOWING_NUMINCS) * SubFlux * prob_occurence)
TotalTransport[indexW0] = rowSums((1. / Param$BLOWING_NUMINCS) * Transport * prob_occurence)
}
Total <- maxSVector(-.00005, Total)
judgeSD <- (snowdepth > 0.0)
TotalTransport <- TotalTransport * judgeSD
Total <- Total * judgeSD
TotalTransport <- rowSums(TotalTransport)
Total <- rowSums(Total)
TotalTransport[which(abs(TotalTransport) < DBL_EPSILON)] <- 0.
Total[which(abs(Total) < DBL_EPSILON)] <- 0.
return(list(PVegVaporFlux = TotalTransport * MM_PER_M,
Blowing = Total * MM_PER_M))
}
#' and use SNOWBlowing(runMode = "VIEW") view the options structure and set the options
#' @param runMode mode to run the function, there three mode:
#' \itemize{
#' \item "RUN": default, run the function like general faunction
#' \item "VIEW": view the structures of Arguments and Output(return)
#' \item "CHECK": chek the structure of the Arguments
#' }
#' @param viewGN grid nummer for "VIEW" mode.
#' @return use SNOWIntercept(runMode = "VIEW") view the outputs and theirs structure
#' @export
SNOWBlowing <- function(InData, Param, runMode = "RUN", viewGN = 3) {
## "VIEW" and "CHECK" mode ####
if(runMode == "VIEW" | runMode == "CHECK"){
fcName <- "SNOWBlowing"
Snow <- data.frame(Depth = rep(0, viewGN), LastSnow = rep(1, viewGN), SurfWater = rep(0, viewGN))
Snow <- putUnit(Snow, c("m", "timeStep", "m"))
Energy <- data.frame(TSnow = rep(0, viewGN))
Aerodyna <- data.frame(ReferHeightSnow = runif(viewGN, 2, 2), RoughCanopy = runif(viewGN, 0.02, 0.52),
RoughSnow = runif(viewGN, 0.002, 0.0052), DisplacCanopy = runif(viewGN, 0.2, 1.7), WindSpeedSnow = runif(viewGN, 2, 17))
MetData <- data.frame(TAir = rep(0, viewGN), AirDensity = runif(viewGN, 1, 2), VaporPressure = runif(viewGN, 0.01, 0.2))
MetData <- putUnit(MetData, c("Cel", "kg/m3", "kPa"))
VegData <- data.frame(Fetch = runif(viewGN, 0.1, 0.3))
VegData <- putUnit(VegData, c("100%"))
LandData <- data.frame(LagOneSlope = runif(viewGN, 0.5, 0.5), SigmaSlope = runif(viewGN, 0.6, 0.8))
LandData <- putUnit(LandData, c("100%", "100%"))
InData0 <- list(Snow = Snow, Energy = Energy, Aerodyna = Aerodyna,
MetData = MetData, VegData = VegData, LandData = LandData)
Param0 <- list(BLOWING_CSALT = ParamAll$BLOWING_CSALT, BLOWING_KA = ParamAll$BLOWING_KA,
BLOWING_NUMINCS = ParamAll$BLOWING_NUMINCS,
BLOWING_MAX_ITER = ParamAll$BLOWING_MAX_ITER, BLOWING_SETTLING = ParamAll$BLOWING_SETTLING,
BLOWING_UTHRESH = ParamAll$BLOWING_UTHRESH, BLOWING_KIN_VIS = ParamAll$BLOWING_KIN_VIS,
SVP_A = ParamAll$SVP_A, SVP_B = ParamAll$SVP_B, SVP_C = ParamAll$SVP_C,
gridN = viewGN,
TimeStepSec = 3600,
BLOWING_CALC_PROB = TRUE, BLOWING_FETCH = TRUE, BLOWING_SIMPLE = TRUE,
BLOWING_SPATIAL_WIND = TRUE, BLOWING_VAR_THRESHOLD = TRUE)
Arguments <- list(InData = InData0, Param = Param0)
if(runMode == "VIEW"){
vw <- viewArgum(fcName, Arguments)
return(list(Arguments = Arguments, Out = vw))
} else {
ck <- checkData(Arguments, list(InData = InData, Param = Param), "Arguments")
return()
}
}
## "RUN" mode ####
## initialize variable ####
Tair <- InData$MetData$TAir
AirDens <- InData$MetData$AirDensity
EactAir <- InData$MetData$VaporPressure
lag_one <- InData$LandData$LagOneSlope
sigma_slope <- InData$LandData$SigmaSlope
fe <- InData$VegData$Fetch
displacement <- InData$Aerodyna$DisplacCanopy
roughness <- InData$Aerodyna$RoughCanopy
Wind <- InData$Aerodyna$WindSpeedSnow
ZO <- InData$Aerodyna$RoughSnow
Zrh <- InData$Aerodyna$ReferHeightSnow
Tsnow <- InData$Energy$TSnow
snowdepth <- InData$Snow$Depth
LastSnow <- InData$Snow$LastSnow
SurfaceLiquidWater <- InData$Snow$SurfWater
Dt <- Param$TimeStepSec
InData$Energy$SublimatLatentHeat <- calc_latent_heat_of_sublimation(Tair)
Ls <- InData$Energy$SublimatLatentHeat
#### Calculate some general variables, that don't depend on wind speed. ####
#### Age in hours ####
Age <- LastSnow * Dt / SEC_PER_HOUR
#### Saturation density of water vapor, Liston A-8 ####
es <- calc_saturated_vapor_pressure(Tair, Param)
Tk <- Tair + CONST_TKFRZ
Ros <- CONST_EPS * es / (CONST_RDAIR * Tk)
#### Diffusivity in m2/s, Liston eq. A-7 ####
Diffusivity <- (2.06e-5) * (Tk / 273.)^1.75
#### Essery et al. 1999, eq. 6 (m*s/kg)
FT <- (Ls / (Param$BLOWING_KA * Tk)) * (Ls * Tk / CONST_RDAIR - 1.)
FT <- FT + 1. / (Diffusivity * Ros)
#### grid cell 10 m wind speed <- 50th percentile wind ####
#### Wind speed at 2 m above snow was passed to this function. ####
wind10 <- Wind * log(10. / (ZO + DBL_EPSILON)) / log((2 + ZO) / (ZO + DBL_EPSILON))
#### Check for bare soil case. ####
# if (iveg == Nveg) {
#     fe <- 1500
#     sigma_slope <- .0002
# }
#### sigma_w/uo:
ratio <- (2.44 - (0.43) * lag_one) * sigma_slope
sigma_w <- wind10 * ratio
Uo <- wind10
#### Parameters for roughness above snow. ####
hv <- (3. / 2.) * displacement
Nd <- (4. / 3.) * (roughness / displacement)
#### Begin loop through wind probability function. ####
area <- 1. / Param$BLOWING_NUMINCS
U10 <- Uo
#### Calculate parameters for probability of blowing snow occurence. ####
#### ( Li and Pomeroy 1997) ####
judgeHV <- (snowdepth < hv)
Uveg <- (U10 / sqrt(1. + 170 * Nd * (abs(hv - snowdepth)))) * judgeHV + U10 * (!judgeHV)
prob_occurence <- get_prob(Tair, Age, SurfaceLiquidWater, Uveg)
if(!Param$BLOWING_CALC_PROB) prob_occurence <- 1.
#### Calculate threshold shear stress. Send 0 for constant or  ####
#### 1 for variable threshold after Li and Pomeroy (1997)      ####
utshear <- get_thresh(Tair, SurfaceLiquidWater, ZO)
if(!Param$BLOWING_VAR_THRESHOLD) utshear <- Param$BLOWING_UTHRESH
#### Iterate to find actual shear stress during saltation. ####
ShearOut <- shear_stress(Uo, ZO, utshear, Param$BLOWING_MAX_ITER)
ushear <- ShearOut$ushear
Zo_salt <- ShearOut$Zo_salt
judgeUT <- (ushear > utshear)
SubFluxOut <- CalcSubFlux(EactAir, es, Zrh, AirDens, utshear,
ushear, fe, Uo, Zo_salt, FT, Param)
SubFlux <- (SubFluxOut$SubFlux) * judgeUT
Transport <- SubFluxOut$Transport
Transport[which(!judgeUT)] <- 0.0
Total <- SubFlux * prob_occurence
TotalTransport <- Transport * prob_occurence
if (Param$BLOWING_SPATIAL_WIND) {
dim2 <- Param$BLOWING_NUMINCS
indexHalb <- as.integer(dim2 / 2)
SubFlux <- LowBundry <- UppBundry <- matrix(0.0, sum(sigma_w != 0.), dim2)
indexW0 <- which(sigma_w != 0.)
#### Find the limits of integration. ####
LowBundry[, 1] <- -9999
UppBundry[, 1] <- Uo + sigma_w * log(2. * area)
LowBundry[, 2:indexHalb] <- mapply(function(p) Uo + sigma_w * log(2. * (p - 1) * area), 2:indexHalb)
UppBundry[, 2:indexHalb] <- mapply(function(p) Uo + sigma_w * log(2. * p * area), 2:indexHalb)
LowBundry[, (indexHalb + 1): (dim2 - 1)] <- mapply(function(p) Uo - sigma_w * log(2. - 2. * ((p - 1) * area)), (indexHalb + 1): (dim2 - 1))
UppBundry[, (indexHalb + 1): (dim2 - 1)] <- mapply(function(p) Uo - sigma_w * log(2. - 2. * (p * area)), (indexHalb + 1): (dim2 - 1))
LowBundry[, dim2] <- Uo - sigma_w * log(2. - 2. * area)
UppBundry[, dim2] <- 9999
#### Find expected value of wind speed for the interval. ####
U10 <- UoTem <- colRep(Uo[indexW0], dim2)
sigma_w <- colRep(sigma_w[indexW0], dim2)
snowdepth <- colRep(snowdepth[indexW0], dim2)
hv <- colRep(hv[indexW0], dim2)
Nd <- colRep(Nd[indexW0], dim2)
Tair <- colRep(Tair[indexW0], dim2)
Age <- colRep(Age[indexW0], dim2)
SurfaceLiquidWater <- colRep(SurfaceLiquidWater[indexW0], dim2)
ZO <- colRep(ZO[indexW0], dim2)
ushear <- colRep(ushear[indexW0], dim2)
Zo_salt <- colRep(Zo_salt[indexW0], dim2)
EactAir <- colRep(EactAir[indexW0], dim2)
es <- colRep(es[indexW0], dim2)
Zrh <- colRep(Zrh[indexW0], dim2)
AirDens <- colRep(AirDens[indexW0], dim2)
fe <- colRep(fe[indexW0], dim2)
Tsnow <- colRep(Tsnow[indexW0], dim2)
FT <- colRep(FT[indexW0], dim2)
Transport <- colRep(Transport[indexW0], dim2)
U10[which(LowBundry >= UoTem)] <- (-0.5 * ((UppBundry + sigma_w) * exp((-1. / sigma_w) * (UppBundry - UoTem)) -
(LowBundry + sigma_w) *
exp((-1. / sigma_w) * (LowBundry - UoTem))) / area)[which(LowBundry >= UoTem)]
U10[which(LowBundry >= UoTem)] <- (0.5 * ((UppBundry - sigma_w) * exp((1. / sigma_w) * (UppBundry - UoTem)) -
(LowBundry - sigma_w) *
exp((1. / sigma_w) * (LowBundry - UoTem))) / area)[which(LowBundry >= UoTem)]
U10 <- maxSVector(0.4, minSVector(25,U10))
#### Calculate parameters for probability of blowing snow occurence. ####
#### ( Li and Pomeroy 1997) ####
judgeHV <- (snowdepth < hv)
Uveg <- (U10 / sqrt(1. + 170 * Nd * abs(hv - snowdepth))) * judgeHV + U10 * (!judgeHV)
prob_occurence <- get_prob(Tair, Age, SurfaceLiquidWater, Uveg)
if(!Param$BLOWING_CALC_PROB) prob_occurence <- 1.
#### Calculate threshold shear stress. Send 0 for constant or  ####
#### 1 for variable threshold after Li and Pomeroy (1997)      ####
utshear <- get_thresh(Tair, SurfaceLiquidWater, ZO)
if(!Param$BLOWING_VAR_THRESHOLD) utshear <- Param$BLOWING_UTHRESH
#### Iterate to find actual shear stress during saltation. ####
U10[which(is.na(U10))] <- 0.
ShearOut <- shear_stress(U10, ZO, utshear, Param$BLOWING_MAX_ITER) ##?##
ushear <- ShearOut$ushear
Zo_salt <- ShearOut$Zo_salt
judgeUU <- (ushear > utshear)
SubFluxOut2 <- CalcSubFlux(EactAir, es, Zrh, AirDens, utshear,
ushear, fe, U10, Zo_salt, FT, Param)
SubFlux <- (SubFluxOut2$SubFlux) * judgeUU
Transport <- SubFluxOut2$Transport
Transport[which(!judgeUU)] <- 0.
Total[indexW0] = rowSums((1. / Param$BLOWING_NUMINCS) * SubFlux * prob_occurence)
TotalTransport[indexW0] = rowSums((1. / Param$BLOWING_NUMINCS) * Transport * prob_occurence)
}
Total <- maxSVector(-.00005, Total)
judgeSD <- (snowdepth > 0.0)
TotalTransport <- TotalTransport * judgeSD
Total <- Total * judgeSD
TotalTransport <- rowSums(TotalTransport)
Total <- rowSums(Total)
TotalTransport[which(abs(TotalTransport) < DBL_EPSILON)] <- 0.
Total[which(abs(Total) < DBL_EPSILON)] <- 0.
return(list(PVegVaporFlux = TotalTransport * MM_PER_M,
Blowing = Total * MM_PER_M))
}
SNOW.VIC(runMode = "VIEW")
#' @param AirDens not klar
#' @param utshear not klar
#' @param ushear not klar
#' @param fe not klar
#' @param U10 not klar
#' @param Zo_salt not klar
#' @param FT not klar
#' @param Param parameters list
#' @return sublimation flux
#' @export
CalcSubFlux <- function(EactAir,
es,
Zrh,
AirDens,
utshear,
ushear,
fe,
U10,
Zo_salt,
FT,
Param) {
particle <- utshear * 2.8
#### SBSM:
if (Param$BLOWING_SIMPLE) {
b <- .25
undersat_2 <- (((EactAir / es) - 1.) * (1. - .027 * log(Zrh) + 0.027 * log(2))) * (EactAir < es)
SubFlux <- b * undersat_2 * U10^5. / FT
Transport <- 0.0 * SubFlux
} else {
#### Sublimation flux (kg/m2*s) <- mass-concentration * sublimation rate * height
#### for both the saltation layer and the suspension layer
#### Saltation layer is assumed constant with height
#### Maximum saltation transport rate (kg/m*s)
#### Liston and Sturm 1998, eq. 6
Qsalt <- (Param$BLOWING_CSALT * AirDens / CONST_G) *
(utshear / ushear) * (ushear * ushear - utshear * utshear)
if (Param$BLOWING_FETCH) {
Qsalt <- Qsalt * (1. + (500. / (3. * fe)) * (exp(-3. * fe / 500.) - 1.))
}
#### Pomeroy and Male (1992)
hsalt <- 0.08436 * ushear^1.27
#### Saltation layer mass concentration (kg/m3)
phi_s <- Qsalt / (hsalt * particle)
TT <- 0.5 * (ushear * ushear) / (U10 * Param$BLOWING_SETTLING)
ztop <- hsalt * (TT / (TT + 1.))^((CONST_KARMAN * ushear) / (-1. * Param$BLOWING_SETTLING))
#### Sublimation loss-rate for the saltation layer (s-1)
psi_s <- sub_with_height(hsalt / 2., es, U10,
EactAir, FT, hsalt,
phi_s, ushear,
Param)
#### Sublimation from the saltation layer in kg/m2*s
SubFlux <- phi_s * psi_s * hsalt
#### Suspension layer must be integrated
SubFlux <- SubFlux + integrateVector(sub_with_height, hsalt, ztop,
es, U10,
EactAir, FT, hsalt,
phi_s, ushear,
Param)
SubFlux <- SubFlux * (EactAir < es)
#### Transport out of the domain by saltation Qs(fe) (kg/m*s), eq 10 Liston and Sturm
saltation_transport <- Qsalt * (1 - exp(-3. * fe / 500.))
#### Transport in the suspension layer
suspension_transport <- integrateVector(transport_with_height, Zrh, hsalt, ztop,
es, U10, AirDens, Zo_salt,
EactAir, FT, hsalt, phi_s, ushear,
Param)
#### Transport at the downstream edge of the fetch in kg/m*s
Transport <- (suspension_transport + saltation_transport)
if (Param$BLOWING_FETCH) {
Transport <- Transport / fe
}
}
return(list(SubFlux = SubFlux, Transport = Transport))
}
SNOW.VIC(runMode = "VIEW")
document()
library(devtools)
document()
document()
document()
library(EDHM)
library(EDHM)
document()
library(EDHM)
library(EDHM)
library(EDHM)
hm.list <- setClass("hm.list", contains = "list")
mylist <- hm.list()
mylist$a <- 1
mylist
