Ls <- InData$Energy$SublimatLatentHeat
#### Calculate some general variables, that don't depend on wind speed. ####
#### Age in hours ####
Age <- LastSnow * Dt / SEC_PER_HOUR
#### Saturation density of water vapor, Liston A-8 ####
es <- calc_saturated_vapor_pressure(Tair, Param)
Tk <- Tair + CONST_TKFRZ
Ros <- CONST_EPS * es / (CONST_RDAIR * Tk)
#### Diffusivity in m2/s, Liston eq. A-7 ####
Diffusivity <- (2.06e-5) * (Tk / 273.)^1.75
#### Essery et al. 1999, eq. 6 (m*s/kg)
FT <- (Ls / (Param$BLOWING_KA * Tk)) * (Ls * Tk / CONST_RDAIR - 1.)
FT <- FT + 1. / (Diffusivity * Ros)
#### grid cell 10 m wind speed <- 50th percentile wind ####
#### Wind speed at 2 m above snow was passed to this function. ####
wind10 <- Wind * log(10. / (ZO + DBL_EPSILON)) / log((2 + ZO) / (ZO + DBL_EPSILON))
#### Check for bare soil case. ####
# if (iveg == Nveg) {
#     fe <- 1500
#     sigma_slope <- .0002
# }
#### sigma_w/uo:
ratio <- (2.44 - (0.43) * lag_one) * sigma_slope
sigma_w <- wind10 * ratio
Uo <- wind10
#### Parameters for roughness above snow. ####
hv <- (3. / 2.) * displacement
Nd <- (4. / 3.) * (roughness / displacement)
#### Begin loop through wind probability function. ####
area <- 1. / Param$BLOWING_NUMINCS
U10 <- Uo
#### Calculate parameters for probability of blowing snow occurence. ####
#### ( Li and Pomeroy 1997) ####
judgeHV <- (snowdepth < hv)
Uveg <- (U10 / sqrt(1. + 170 * Nd * (abs(hv - snowdepth)))) * judgeHV + U10 * (!judgeHV)
prob_occurence <- get_prob(Tair, Age, SurfaceLiquidWater, Uveg)
if(!Param$BLOWING_CALC_PROB) prob_occurence <- 1.
#### Calculate threshold shear stress. Send 0 for constant or  ####
#### 1 for variable threshold after Li and Pomeroy (1997)      ####
utshear <- get_thresh(Tair, SurfaceLiquidWater, ZO)
if(!Param$BLOWING_VAR_THRESHOLD) utshear <- Param$BLOWING_UTHRESH
#### Iterate to find actual shear stress during saltation. ####
ShearOut <- shear_stress(Uo, ZO, utshear, Param$BLOWING_MAX_ITER)
ushear <- ShearOut$ushear
Zo_salt <- ShearOut$Zo_salt
judgeUT <- (ushear > utshear)
SubFluxOut <- CalcSubFlux(EactAir, es, Zrh, AirDens, utshear,
ushear, fe, Uo, Zo_salt, FT, Param)
SubFlux <- (SubFluxOut$SubFlux) * judgeUT
Transport <- SubFluxOut$Transport
Transport[which(!judgeUT)] <- 0.0
Total <- SubFlux * prob_occurence
TotalTransport <- Transport * prob_occurence
if (Param$BLOWING_SPATIAL_WIND) {
dim2 <- Param$BLOWING_NUMINCS
indexHalb <- as.integer(dim2 / 2)
SubFlux <- LowBundry <- UppBundry <- matrix(0.0, sum(sigma_w != 0.), dim2)
indexW0 <- which(sigma_w != 0.)
#### Find the limits of integration. ####
LowBundry[, 1] <- -9999
UppBundry[, 1] <- Uo + sigma_w * log(2. * area)
LowBundry[, 2:indexHalb] <- mapply(function(p) Uo + sigma_w * log(2. * (p - 1) * area), 2:indexHalb)
UppBundry[, 2:indexHalb] <- mapply(function(p) Uo + sigma_w * log(2. * p * area), 2:indexHalb)
LowBundry[, (indexHalb + 1): (dim2 - 1)] <- mapply(function(p) Uo - sigma_w * log(2. - 2. * ((p - 1) * area)), (indexHalb + 1): (dim2 - 1))
UppBundry[, (indexHalb + 1): (dim2 - 1)] <- mapply(function(p) Uo - sigma_w * log(2. - 2. * (p * area)), (indexHalb + 1): (dim2 - 1))
LowBundry[, dim2] <- Uo - sigma_w * log(2. - 2. * area)
UppBundry[, dim2] <- 9999
#### Find expected value of wind speed for the interval. ####
U10 <- UoTem <- colRep(Uo[indexW0], dim2)
sigma_w <- colRep(sigma_w[indexW0], dim2)
snowdepth <- colRep(snowdepth[indexW0], dim2)
hv <- colRep(hv[indexW0], dim2)
Nd <- colRep(Nd[indexW0], dim2)
Tair <- colRep(Tair[indexW0], dim2)
Age <- colRep(Age[indexW0], dim2)
SurfaceLiquidWater <- colRep(SurfaceLiquidWater[indexW0], dim2)
ZO <- colRep(ZO[indexW0], dim2)
ushear <- colRep(ushear[indexW0], dim2)
Zo_salt <- colRep(Zo_salt[indexW0], dim2)
EactAir <- colRep(EactAir[indexW0], dim2)
es <- colRep(es[indexW0], dim2)
Zrh <- colRep(Zrh[indexW0], dim2)
AirDens <- colRep(AirDens[indexW0], dim2)
fe <- colRep(fe[indexW0], dim2)
Tsnow <- colRep(Tsnow[indexW0], dim2)
FT <- colRep(FT[indexW0], dim2)
Transport <- colRep(Transport[indexW0], dim2)
U10[which(LowBundry >= UoTem)] <- (-0.5 * ((UppBundry + sigma_w) * exp((-1. / sigma_w) * (UppBundry - UoTem)) -
(LowBundry + sigma_w) *
exp((-1. / sigma_w) * (LowBundry - UoTem))) / area)[which(LowBundry >= UoTem)]
U10[which(LowBundry >= UoTem)] <- (0.5 * ((UppBundry - sigma_w) * exp((1. / sigma_w) * (UppBundry - UoTem)) -
(LowBundry - sigma_w) *
exp((1. / sigma_w) * (LowBundry - UoTem))) / area)[which(LowBundry >= UoTem)]
U10 <- maxSVector(0.4, minSVector(25,U10))
#### Calculate parameters for probability of blowing snow occurence. ####
#### ( Li and Pomeroy 1997) ####
judgeHV <- (snowdepth < hv)
Uveg <- (U10 / sqrt(1. + 170 * Nd * abs(hv - snowdepth))) * judgeHV + U10 * (!judgeHV)
prob_occurence <- get_prob(Tair, Age, SurfaceLiquidWater, Uveg)
if(!Param$BLOWING_CALC_PROB) prob_occurence <- 1.
#### Calculate threshold shear stress. Send 0 for constant or  ####
#### 1 for variable threshold after Li and Pomeroy (1997)      ####
utshear <- get_thresh(Tair, SurfaceLiquidWater, ZO)
if(!Param$BLOWING_VAR_THRESHOLD) utshear <- Param$BLOWING_UTHRESH
#### Iterate to find actual shear stress during saltation. ####
U10[which(is.na(U10))] <- 0.
ShearOut <- shear_stress(U10, ZO, utshear, Param$BLOWING_MAX_ITER) ##?##
ushear <- ShearOut$ushear
Zo_salt <- ShearOut$Zo_salt
judgeUU <- (ushear > utshear)
SubFluxOut2 <- CalcSubFlux(EactAir, es, Zrh, AirDens, utshear,
ushear, fe, U10, Zo_salt, FT, Param)
SubFlux <- (SubFluxOut2$SubFlux) * judgeUU
Transport <- SubFluxOut2$Transport
Transport[which(!judgeUU)] <- 0.
Total[indexW0] = rowSums((1. / Param$BLOWING_NUMINCS) * SubFlux * prob_occurence)
TotalTransport[indexW0] = rowSums((1. / Param$BLOWING_NUMINCS) * Transport * prob_occurence)
}
Total <- maxSVector(-.00005, Total)
judgeSD <- (snowdepth > 0.0)
TotalTransport <- TotalTransport * judgeSD
Total <- Total * judgeSD
TotalTransport <- rowSums(TotalTransport)
Total <- rowSums(Total)
TotalTransport[which(abs(TotalTransport) < DBL_EPSILON)] <- 0.
Total[which(abs(Total) < DBL_EPSILON)] <- 0.
return(list(PVegVaporFlux = TotalTransport * MM_PER_M,
Blowing = Total * MM_PER_M))
}
SNOW.VIC(runMode = "VIEW")
#' @param AirDens not klar
#' @param utshear not klar
#' @param ushear not klar
#' @param fe not klar
#' @param U10 not klar
#' @param Zo_salt not klar
#' @param FT not klar
#' @param Param parameters list
#' @return sublimation flux
#' @export
CalcSubFlux <- function(EactAir,
es,
Zrh,
AirDens,
utshear,
ushear,
fe,
U10,
Zo_salt,
FT,
Param) {
particle <- utshear * 2.8
#### SBSM:
if (Param$BLOWING_SIMPLE) {
b <- .25
undersat_2 <- (((EactAir / es) - 1.) * (1. - .027 * log(Zrh) + 0.027 * log(2))) * (EactAir < es)
SubFlux <- b * undersat_2 * U10^5. / FT
Transport <- 0.0 * SubFlux
} else {
#### Sublimation flux (kg/m2*s) <- mass-concentration * sublimation rate * height
#### for both the saltation layer and the suspension layer
#### Saltation layer is assumed constant with height
#### Maximum saltation transport rate (kg/m*s)
#### Liston and Sturm 1998, eq. 6
Qsalt <- (Param$BLOWING_CSALT * AirDens / CONST_G) *
(utshear / ushear) * (ushear * ushear - utshear * utshear)
if (Param$BLOWING_FETCH) {
Qsalt <- Qsalt * (1. + (500. / (3. * fe)) * (exp(-3. * fe / 500.) - 1.))
}
#### Pomeroy and Male (1992)
hsalt <- 0.08436 * ushear^1.27
#### Saltation layer mass concentration (kg/m3)
phi_s <- Qsalt / (hsalt * particle)
TT <- 0.5 * (ushear * ushear) / (U10 * Param$BLOWING_SETTLING)
ztop <- hsalt * (TT / (TT + 1.))^((CONST_KARMAN * ushear) / (-1. * Param$BLOWING_SETTLING))
#### Sublimation loss-rate for the saltation layer (s-1)
psi_s <- sub_with_height(hsalt / 2., es, U10,
EactAir, FT, hsalt,
phi_s, ushear,
Param)
#### Sublimation from the saltation layer in kg/m2*s
SubFlux <- phi_s * psi_s * hsalt
#### Suspension layer must be integrated
SubFlux <- SubFlux + integrateVector(sub_with_height, hsalt, ztop,
es, U10,
EactAir, FT, hsalt,
phi_s, ushear,
Param)
SubFlux <- SubFlux * (EactAir < es)
#### Transport out of the domain by saltation Qs(fe) (kg/m*s), eq 10 Liston and Sturm
saltation_transport <- Qsalt * (1 - exp(-3. * fe / 500.))
#### Transport in the suspension layer
suspension_transport <- integrateVector(transport_with_height, Zrh, hsalt, ztop,
es, U10, AirDens, Zo_salt,
EactAir, FT, hsalt, phi_s, ushear,
Param)
#### Transport at the downstream edge of the fetch in kg/m*s
Transport <- (suspension_transport + saltation_transport)
if (Param$BLOWING_FETCH) {
Transport <- Transport / fe
}
}
return(list(SubFlux = SubFlux, Transport = Transport))
}
SNOW.VIC(runMode = "VIEW")
document()
library(devtools)
document()
document()
document()
library(EDHM)
library(EDHM)
document()
library(EDHM)
library(EDHM)
library(EDHM)
hm.list <- setClass("hm.list", contains = "list")
mylist <- hm.list()
mylist$a <- 1
mylist
library(HMtools)
library(HMtools)
library(HMtools)
##ET
Data_ReferenceET.PenMon <- list(InData = left_merge(hm.list(),
list(MetData = list(TAir = 0,
TMax = 0,
TMin = 0,
RelativeHumidity = 0,
WindSpeed = 0,
WindH = 0,
SunHour = 0),
GeoData = list(Latitude = 0,
Elevation = 0),
TimeData = list(NDay = 0))),
Param = list(PeriodN = 0,
GridN = 0),
OutData = left_merge(hm.list(),
list(Evatrans = list(RET = 0))))
str(Data_ReferenceET.PenMon)
a <- read.table(text = "  RET <- InData$Evatrans$RET
PrecipitationHoch <- InData$Prec$Precipitation
MoistureVolume <- InData$Intercept$Interception
MoistureCapacityMax <- InData$Canopy$StorageCapacity
MoistureVolume1 <- InData$Ground$MoistureVolume
MoistureCapacityMax1 <- InData$Ground$MoistureCapacityMax
AerodynamicResistance <- InData$Aerodyna$AerodynaResist
ArchitecturalResistance <- InData$Aerodyna$ArchitecturalResist
StomatalResistance <- InData$Aerodyna$StomatalResist
")
a <- read.table(text = "  RET <- InData$Evatrans$RET
PrecipitationHoch <- InData$Prec$Precipitation
MoistureVolume <- InData$Intercept$Interception
MoistureCapacityMax <- InData$Canopy$StorageCapacity
MoistureVolume1 <- InData$Ground$MoistureVolume
MoistureCapacityMax1 <- InData$Ground$MoistureCapacityMax
AerodynamicResistance <- InData$Aerodyna$AerodynaResist
ArchitecturalResistance <- InData$Aerodyna$ArchitecturalResist
StomatalResistance <- InData$Aerodyna$StomatalResist
", sep = "$")
a
factor(a[,2])
factor(a[,2])$Levels
str(factor(a[,2]))
str(factor(a[,2])$Factor)
length(factor(a[,2]))
unique(factor(a[,2]))
boomText <- read.table(text = "
RET <- InData$Evatrans$RET
PrecipitationHoch <- InData$Prec$Precipitation
MoistureVolume <- InData$Intercept$Interception
MoistureCapacityMax <- InData$Canopy$StorageCapacity
MoistureVolume1 <- InData$Ground$MoistureVolume
MoistureCapacityMax1 <- InData$Ground$MoistureCapacityMax
AerodynamicResistance <- InData$Aerodyna$AerodynaResist
ArchitecturalResistance <- InData$Aerodyna$ArchitecturalResist
StomatalResistance <- InData$Aerodyna$StomatalResist
", sep = "$")
boomText <- read.table(text = "RET <- InData$Evatrans$RET
PrecipitationHoch <- InData$Prec$Precipitation
MoistureVolume <- InData$Intercept$Interception
MoistureCapacityMax <- InData$Canopy$StorageCapacity
MoistureVolume1 <- InData$Ground$MoistureVolume
MoistureCapacityMax1 <- InData$Ground$MoistureCapacityMax
AerodynamicResistance <- InData$Aerodyna$AerodynaResist
ArchitecturalResistance <- InData$Aerodyna$ArchitecturalResist
StomatalResistance <- InData$Aerodyna$StomatalResist
", sep = "$")
boomText <- read.table(text = "RET <- InData$Evatrans$RET
PrecipitationHoch <- InData$Prec$Precipitation
MoistureVolume <- InData$Intercept$Interception
MoistureCapacityMax <- InData$Canopy$StorageCapacity
MoistureVolume1 <- InData$Ground$MoistureVolume
MoistureCapacityMax1 <- InData$Ground$MoistureCapacityMax
AerodynamicResistance <- InData$Aerodyna$AerodynaResist
ArchitecturalResistance <- InData$Aerodyna$ArchitecturalResist
StomatalResistance <- InData$Aerodyna$StomatalResist
", sep = "$")
unique(boomText[,2])
subsubN <- factor(boomText[,2])
factor(boomText[,2])
as.numeric(factor(boomText[,2]))
typeof(factor(boomText[,2]))
factor(boomText[,2])
numeric(factor(boomText[,2]))
as.data.frame(factor(boomText[,2]))
table(boomText[,2])
subList <- table(boomText[,2])
subN <- length(subList)
subN
as.data.frame(table(boomText[,2]))
subList <- table(boomText[,2])
subN <- length(subList)
subdf <- as.data.frame(table(boomText[,2]))
for(i in 1:subN){
subdf[i,2] <- subsubName <- paste0(boomText[which(boomText[,2] == subdf[i,2]),3], " = 0", collapse = ",")
}
paste0(subdf[,1], " = list(", subdf[,2], ")", collapse = ",")
subList <- table(boomText[,2])
subN <- length(subList)
subdf <- as.data.frame(table(boomText[,2]))
for(i in 1:subN){
subdf[i,2] <- paste0(boomText[which(boomText[,2] == subdf[i,2]),3], " = 0", collapse = ",")
}
paste0(subdf[,1], " = list(", subdf[,2], ")", collapse = ",")
i
subdf <- as.data.frame(table(boomText[,2]))
for(i in 1:subN){
subdf[i,2] <- paste0(boomText[which(boomText[,2] == subdf[i,1]),3], " = 0", collapse = ",")
}
paste0(subdf[,1], " = list(", subdf[,2], ")", collapse = ",")
subList <- table(boomText[,2])
subN <- length(subList)
subdf <- as.data.frame(table(boomText[,2]))
for(i in 1:subN){
subdf[i,2] <- paste0(boomText[which(boomText[,2] == subdf[i,1]),3], " = 0", collapse = ",\n")
}
print(paste0(subdf[,1], " = list(", subdf[,2], ")", collapse = ",\n"))
subList <- table(boomText[,2])
subN <- length(subList)
subdf <- as.data.frame(table(boomText[,2]))
for(i in 1:subN){
subdf[i,2] <- paste0(boomText[which(boomText[,2] == subdf[i,1]),3], " = 0", collapse = ",\n")
}
bText <- (paste0(subdf[,1], " = list(", subdf[,2], ")", collapse = ",\n"))
bText
bText
textBoom <- function(boomText){
subList <- table(boomText[,2])
subN <- length(subList)
subdf <- as.data.frame(table(boomText[,2]))
for(i in 1:subN){
subdf[i,2] <- paste0(boomText[which(boomText[,2] == subdf[i,1]),3], " = 0", collapse = ",\n")
}
cat(paste0(subdf[,1], " = list(", subdf[,2], ")", collapse = ",\n"))
}
textBoom(boomText)
boomText <- read.table(text = "  SoilMoistureVolume <- InData$Ground$MoistureVolume
SoilMoistureVolumeMax <- InData$Ground$MoistureCapacityMax
", sep = "$")
textBoom(boomText)
textBoom <- function(boomText){
subList <- table(boomText[,2])
subN <- length(subList)
subdf <- as.data.frame(table(boomText[,2]))
for(i in 1:subN){
subdf[i,2] <- paste0(boomText[which(boomText[,2] == subdf[i,1]),3], " = 0", collapse = ",\n")
}
inda1 <- "InData = left_merge(hm.list(),\nlist("
inda <- paste0(inda1, paste0(subdf[,1], " = list(", subdf[,2], ")", collapse = ",\n"),")),\nParam = list(")
}
textBoom(boomText)
textBoom <- function(boomText){
subList <- table(boomText[,2])
subN <- length(subList)
subdf <- as.data.frame(table(boomText[,2]))
for(i in 1:subN){
subdf[i,2] <- paste0(boomText[which(boomText[,2] == subdf[i,1]),3], " = 0", collapse = ",\n")
}
inda1 <- "InData = left_merge(hm.list(),\nlist("
inda <- paste0(inda1, paste0(subdf[,1], " = list(", subdf[,2], ")", collapse = ",\n"),")),\nParam = list(")
cat(inda)
}
textBoom(boomText)
paText <- read.table(text = "  paExponentARNOBase <- Param$ExponentARNOBase
paSoilMoistureVolumeARNOBaseThresholdRadio <- Param$ARNOBaseThresholdRadio
paDrainageLossMax <- Param$DrainageLossMax
paDrainageLossMin <- Param$DrainageLossMin
", sep = "$")
textBoom <- function(indaText, paText){
subList <- table(indaText[,2])
subN <- length(subList)
subdf <- as.data.frame(table(indaText[,2]))
for(i in 1:subN){
subdf[i,2] <- paste0(indaText[which(indaText[,2] == subdf[i,1]),3], " = 0", collapse = ",\n")
}
inda1 <- "InData = left_merge(hm.list(),\nlist("
inda <- paste0(inda1, paste0(subdf[,1], " = list(", subdf[,2], ")", collapse = ",\n"),")),\nParam = list(")
pa <- paste0(paText[,2], " = 0", collapse = ",")
out <- "),\nOutData = left_merge(hm.list(),\nlist()))"
cat(paste0(inda, pa, out))
}
textBoom(indaText, paText)
indaText <- read.table(text = "  SoilMoistureVolume <- InData$Ground$MoistureVolume
SoilMoistureVolumeMax <- InData$Ground$MoistureCapacityMax
", sep = "$")
paText <- read.table(text = "  paExponentARNOBase <- Param$ExponentARNOBase
paSoilMoistureVolumeARNOBaseThresholdRadio <- Param$ARNOBaseThresholdRadio
paDrainageLossMax <- Param$DrainageLossMax
paDrainageLossMin <- Param$DrainageLossMin
", sep = "$")
textBoom(indaText, paText)
textBoom <- function(indaText, paText){
subList <- table(indaText[,2])
subN <- length(subList)
subdf <- as.data.frame(table(indaText[,2]))
for(i in 1:subN){
subdf[i,2] <- paste0(indaText[which(indaText[,2] == subdf[i,1]),3], " = 0", collapse = ",\n")
}
inda1 <- "list(InData = left_merge(hm.list(),\nlist("
inda <- paste0(inda1, paste0(subdf[,1], " = list(", subdf[,2], ")", collapse = ",\n"),")),\nParam = list(")
pa <- paste0(paText[,2], " = 0", collapse = ",")
out <- "),\nOutData = left_merge(hm.list(),\nlist()))"
cat(paste0(inda, pa, out))
}
textBoom(indaText, paText)
textBoom <- function(indaText, paText){
subList <- table(indaText[,2])
subN <- length(subList)
subdf <- as.data.frame(table(indaText[,2]))
for(i in 1:subN){
subdf[i,2] <- paste0(indaText[which(indaText[,2] == subdf[i,1]),3], " = 0", collapse = ",\n")
}
inda1 <- "Data_ <- \nlist(InData = left_merge(hm.list(),\nlist("
inda <- paste0(inda1, paste0(subdf[,1], " = list(", subdf[,2], ")", collapse = ",\n"),")),\nParam = list(")
pa <- paste0(paText[,2], " = 0", collapse = ",")
out <- "),\nOutData = left_merge(hm.list(),\nlist()))"
cat(paste0(inda, pa, out))
}
textBoom(indaText, paText)
## Base
Data_BASEFLOW.ARNO <-
list(InData = left_merge(hm.list(),
list(Ground = list(MoistureVolume = 0,
MoistureCapacityMax = 0))),
Param = list(ExponentARNOBase = 0,ARNOBaseThresholdRadio = 0,DrainageLossMax = 0,DrainageLossMin = 0),
OutData = left_merge(hm.list(),
list(Ground = list(BaseFlow = 0))))
indaText <- read.table(text = "  CanopyStorageCapacity <- InData$Canopy$StorageCapacity - InData$Intercept$Interception
RainfallDuringSaturation <- InData$Prec$Precipitation
Evaporation <- InData$ET$EvaporationCanopy
", sep = "$")
paText <- read.table(text = "paCoefficientFreeThroughfall <- Param$CoefficientFreeThroughfall", sep = "$")
indaText <- read.table(text = "  CanopyStorageCapacity <- InData$Canopy$StorageCapacity -
InData$Intercept$Interception
RainfallDuringSaturation <- InData$Prec$Precipitation
Evaporation <- InData$ET$EvaporationCanopy
", sep = "$")
paText <- read.table(text = "paCoefficientFreeThroughfall <- Param$CoefficientFreeThroughfall", sep = "$")
textBoom(indaText, paText)
indaText <- read.table(text = "  HydraulicConductivity <- InData$Ground$Conductivity
WettingFrontSoilSuction <- InData$Ground$WettingFrontSuction
EffectivePorosity <- InData$Ground$Porosity
SoilMoistureVolume <- InData$Ground$MoistureVolume
SoilMoistureContent <- SoilMoistureVolume / InData$Ground$Depth
", sep = "$")
paText <- read.table(text = "paCoefficientFreeThroughfall <- Param$CoefficientFreeThroughfall", sep = "$")
textBoom(indaText, paText)
indaText <- read.table(text = "  PrecipitationHoch <- InData$Prec$Precipitation
SoilMoistureCapacityMax <- InData$Ground$MoistureCapacityMax
SoilMoistureCapacity <- InData$Ground$MoistureCapacity
", sep = "$")
paText <- read.table(text = "  paSoilMoistureCapacityB <- Param$SoilMoistureCapacityB
", sep = "$")
textBoom(indaText, paText)
indaText <- read.table(text = "  PrecipitationHoch <- InData$Prec$Precipitation
InfiltrationRateMax <- InData$Infilt$InfiltrationRat
", sep = "$")
paText <- read.table(text = "  paInfiltrationRateB <- Param$InfiltrationRateB
", sep = "$")
textBoom(indaText, paText)
indaText <- read.table(text = "  PrecipitationHoch <- InData$Prec$Precipitation
SoilMoistureCapacityMax <- InData$Ground$MoistureCapacityMax
SoilMoistureVolum <- InData$Ground$MoistureVolume
", sep = "$")
paText <- read.table(text = "  paInfiltrationRateB <- Param$InfiltrationRateB
", sep = "$")
textBoom(indaText, paText)
indaText <- read.table(text = "  PrecipitationHoch <- InData$Prec$Precipitation
InfiltrationRateMax <- InData$Infilt$InfiltrationRateMax
", sep = "$")
paText <- read.table(text = "  paInfiltrationRateB <- Param$InfiltrationRateB
", sep = "$")
textBoom(indaText, paText)
indaText <- read.table(text = "  PrecipitationHoch <- InData$Prec$Precipitation
SoilMoistureCapacityMax <- InData$Ground$MoistureCapacityMax
SoilMoistureVolume <- InData$Ground$MoistureVolume
InfiltrationRateMax <- InData$Infilt$InfiltrationRat
", sep = "$")
paText <- read.table(text = "  paSoilMoistureCapacityB <- Param$SoilMoistureCapacityB
paInfiltrationRateB <- Param$InfiltrationRateB
", sep = "$")
textBoom(indaText, paText)
indaText <- read.table(text = "  PrecipitationHoch <- InData$Prec$Precipitation
SoilMoistureCapacity <- InData$Ground$MoistureCapacity
SoilMoistureCapacityMax <- InData$Ground$MoistureCapacityMax
InfiltrationRateMax <- InData$Infilt$InfiltrationRateMax
", sep = "$")
paText <- read.table(text = "  paSoilMoistureCapacityB <- Param$SoilMoistureCapacityB
paInfiltrationRateB <- Param$InfiltrationRateB
", sep = "$")
textBoom(indaText, paText)
